# -*- coding: utf-8 -*-
"""Copy of DL Project 2. MNIST Digit classification using NN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l7WvzmRc94vc6yd8d7tMRrDLx4gwChW8

**MNIST Handwritten Digit Clasification using Deep Learning (Neural Network)**

Importing the Dependencies
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import cv2
from google.colab.patches import cv2_imshow
from PIL import Image
import tensorflow as tf
tf.random.set_seed(3)
from tensorflow import keras
from keras.datasets import mnist
from tensorflow.math import confusion_matrix

"""Loading the MNIST data from keras.datasets"""

(X_train, Y_train), (X_test, Y_test) =  mnist.load_data()

type(X_train)

# shape of the numpy arrays
print(X_train.shape, Y_train.shape, X_test.shape, Y_test.shape)

"""Training data = 60,000 Images

Test data = 10,000 Images

Image dimension  --> 28 x 28

Grayscale Image  --> 1 channel
"""

# printing the 10th image

print(X_train[10])

print(X_train[10].shape)

# displaying the image

plt.imshow(X_train[25])
plt.show()

# print the corresponding label
print(Y_train[25])

"""Image Lables"""

print(Y_train.shape, Y_test.shape)

# unique values in Y_train
print(np.unique(Y_train))

# unique values in Y_test
print(np.unique(Y_test))

"""We can use these labels as such or we can also apply One Hot Encoding

All the images have the same dimensions in this dataset, If not, we have to resize all the images to a common dimension
"""

# scaling the values

X_train = X_train/255
X_test = X_test/255

# printing the 10th image

print(X_train[10])

"""Building the Neural Network"""

# setting up the layers of the Neural  Network

model = keras.Sequential([
                          keras.layers.Flatten(input_shape=(28,28)),
                          keras.layers.Dense(50, activation='relu'),
                          keras.layers.Dense(50, activation='relu'),
                          keras.layers.Dense(10, activation='softmax')
])

# compiling the Neural Network

model.compile(optimizer='adam',
              loss = 'sparse_categorical_crossentropy',
              metrics=['accuracy'])

print(Y_train[10])

# training the Neural Network

model.fit(X_train, Y_train, epochs=10)

"""Training data accuracy = 98.94%

**Accuracy on Test data:**
"""

loss, accuracy = model.evaluate(X_test, Y_test)
print(accuracy)

"""Test data accuracy = 97.1%"""

print(X_test.shape)

# first data point in X_test
plt.imshow(X_test[0])
plt.show()

print(Y_test[0])

Y_pred = model.predict(X_test)

print(Y_pred.shape)

print(Y_pred[0])

"""model.predict() gives the prediction probability of each class for that data point"""

# converting the prediction probabilities to class label

label_for_first_test_image = np.argmax(Y_pred[0])
print(label_for_first_test_image)

# converting the prediction probabilities to class label for all test data points
Y_pred_labels = [np.argmax(i) for i in Y_pred]
print(Y_pred_labels)

"""Y_test  -->  True labels

Y_pred_labels  -->  Predicted Labels

Confusin Matrix
"""

conf_mat = confusion_matrix(Y_test, Y_pred_labels)

print(conf_mat)

plt.figure(figsize=(15,7))
sns.heatmap(conf_mat, annot=True, fmt='d', cmap='Blues')
plt.ylabel('True Labels')
plt.xlabel('Predicted Labels')

"""Building a Predictive System

Prediction image link: https://storage.googleapis.com/kagglesdsdata/datasets/2265389/3799619/mnist_png/test/5/1102.png?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=databundle-worker-v2%40kaggle-161607.iam.gserviceaccount.com%2F20250505%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20250505T092901Z&X-Goog-Expires=345600&X-Goog-SignedHeaders=host&X-Goog-Signature=600d53a4dd7936dd321722bedb8973ca62ed616b2ac5c67754244e9ed72a47893bc2df6d610760c7aac94b7f2c6f3fa9e71457b1c8baea825e7ff97aa5c7b79b4b0a59a1ca6c12fbc3484adf91be7155e1bda57e38077fa861253ece4ee72ff80cf003ccd81a57edd3e3f27fc3b708c4866fa5203aee17160c1d470081a7750664bb17f051087fd709cadffc3da0edf3f15226e5096768ef2952b04230eaf0c50151e6dda02def5cf360919b13924b444356ff673beedad6de25a9776f94a9c5850b39ff16e7f32f270dbcfbdba3c4f05bbcf9818ff236c598cda7e04971321e438d61d1f1431bebcb06ccff2527e6f055d755711fc0e5b6fe3d6b3c2a502d50
"""

input_image_path = '/content/five.png'

input_image = cv2.imread(input_image_path)

type(input_image)

print(input_image)

cv2_imshow(input_image)

input_image.shape

grayscale = cv2.cvtColor(input_image, cv2.COLOR_RGB2GRAY)

grayscale.shape

input_image_resize = cv2.resize(grayscale, (28, 28)) #just in case the original wasn't already (28,28)

input_image_resize.shape

cv2_imshow(input_image_resize)

input_image_resize = input_image_resize/255

type(input_image_resize)

image_reshaped = np.reshape(input_image_resize, [1,28,28])

input_prediction = model.predict(image_reshaped)
print(input_prediction)

input_pred_label = np.argmax(input_prediction)

print(input_pred_label)

"""**Predictive System**"""

input_image_path = input('Path of the image to be predicted: ')

input_image = cv2.imread(input_image_path)

cv2_imshow(input_image)

grayscale = cv2.cvtColor(input_image, cv2.COLOR_RGB2GRAY)

input_image_resize = cv2.resize(grayscale, (28, 28))

input_image_resize = input_image_resize/255

image_reshaped = np.reshape(input_image_resize, [1,28,28])

input_prediction = model.predict(image_reshaped)

input_pred_label = np.argmax(input_prediction)

print('The Handwritten Digit is recognised as ', input_pred_label)

